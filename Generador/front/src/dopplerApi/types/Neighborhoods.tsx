import { z } from "zod";
import { TemplatesNames } from "../../pdf/types/Templates";
import { FunctionalUnit } from "./FunctionalUnit";

//Generated by https://quicktype.io

export interface Neighborhood {
  _id: string;
  name: string;
  acronym: string;
  actNumber: number;
  sendToApi: boolean;
  reportFields: ReportFields;
  isActive: boolean;
  template: TemplatesNames;
  tokens?: {
    accessin: string;
  };  
  functionalUnits?: FunctionalUnit[];
  __v: number;
}

export type NewNeighborhood = {
  id?: string;
} & z.infer<typeof NewNeighborhood>;

export type ReportFields = z.infer<typeof ReportFields>;

export const ReportFields = z.object({
  date: z.boolean().default(true),
  plate: z.boolean().default(true),
  actNumber: z.boolean().default(true),
  speed: z.boolean().default(true),
  neighborhood: z.boolean().default(true),
  location: z.boolean().default(true),
  src: z.boolean().default(true),
  funtionalUnit: z.boolean().default(false),
  homeowner: z.boolean().default(false),
  id: z.boolean().default(true),
  model: z.boolean().default(true),
  sensorId: z.boolean().default(true),
});

export const NewNeighborhood = z.object({
  name: z.string().min(1, "El nombre es un campo obligatorio"),
  acronym: z
    .string()
    .min(1, "El acronimo es obligatorio")
    .max(4, "Los acronimos pueden tener hasta 4 caracteres"),
  reportFields: ReportFields.default({
    date: true,
    plate: true,
    actNumber: true,
    speed: true,
    neighborhood: true,
    location: true,
    src: true,
    funtionalUnit: false,
    homeowner: false,
    id: true,
    model: true,
    sensorId: true,
  }).optional(),
  actNumber: z
    .number()
    .min(1, "Debe ser un n√∫mero mayor o igual a 1")
    .optional(),
  isActive: z.boolean().default(true).optional(),
  sendToApi: z.boolean().default(false).optional(),
  template: z.string(),
  tokens: z
    .object({
      accessin: z.string().optional(),
    })
    .optional(),
});
